name: E2E Tests - Playwright

on:
  workflow_run:
    workflows: ["Azure Static Web Apps CI/CD"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      deployment_url:
        description: 'URL to test against (optional)'
        required: false
        type: string

jobs:
  # Set pending status when tests start
  set-status-pending:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Set commit status to pending
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.workflow_run.pull_requests[0];
            if (!pr) return;
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.workflow_run.head_sha,
              state: 'pending',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'E2E tests running...',
              context: 'E2E Tests / Playwright'
            });

  test:
    # Only run if the deployment was successful or this is a manual run
    needs: [set-status-pending]
    # Continue even if set-status-pending is skipped (for manual runs)
    if: ${{ always() && (github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch') }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - project: chromium
            browser: chromium
          - project: firefox
            browser: firefox
          - project: webkit
            browser: webkit
          - project: 'Mobile Chrome'
            browser: chromium
          - project: 'Mobile Safari'
            browser: webkit
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/jod'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Determine test URL
      id: test_url
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ -n "${{ github.event.inputs.deployment_url }}" ]]; then
          # Manual run with custom URL
          echo "TEST_URL=${{ github.event.inputs.deployment_url }}" >> $GITHUB_OUTPUT
          echo "PR_NUMBER=" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.workflow_run.event }}" == "pull_request" ]]; then
          # PR deployment - need to get PR number from workflow run
          PR_NUMBER=$(echo '${{ toJSON(github.event.workflow_run.pull_requests[0]) }}' | jq -r '.number // empty')
          if [[ -n "${PR_NUMBER}" ]]; then
            echo "TEST_URL=https://proud-ground-0a659080f-${PR_NUMBER}.eastus2.4.azurestaticapps.net" >> $GITHUB_OUTPUT
            echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_OUTPUT
            echo "Testing PR #${PR_NUMBER} deployment"
          else
            echo "TEST_URL=https://proud-ground-0a659080f.4.azurestaticapps.net" >> $GITHUB_OUTPUT
            echo "PR_NUMBER=" >> $GITHUB_OUTPUT
          fi
        else
          # Main branch deployment
          echo "TEST_URL=https://proud-ground-0a659080f.4.azurestaticapps.net" >> $GITHUB_OUTPUT
          echo "PR_NUMBER=" >> $GITHUB_OUTPUT
        fi
        echo "Testing against: $(cat $GITHUB_OUTPUT | grep TEST_URL | cut -d'=' -f2)"
    
    - name: Wait for deployment to be ready
      run: |
        URL="${{ steps.test_url.outputs.TEST_URL }}"
        echo "Waiting for deployment at ${URL}"
        for i in {1..30}; do
          if curl -s -o /dev/null -w "%{http_code}" "${URL}" | grep -q "200\|304"; then
            echo "Deployment is ready!"
            break
          fi
          echo "Waiting for deployment... (attempt $i/30)"
          sleep 10
        done
    
    - name: Run Playwright tests
      run: npx playwright test --project="${{ matrix.project }}"
      env:
        PLAYWRIGHT_BASE_URL: ${{ steps.test_url.outputs.TEST_URL }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results-${{ strategy.job-index }}
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    if: always()
    needs: test
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          artifacts/**/test-results/*.xml
        check_name: Playwright Test Results
        comment_title: Playwright Test Results
        
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: github.event.workflow_run.event == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get PR number from workflow run
          const pr = context.payload.workflow_run.pull_requests[0];
          if (!pr) {
            console.log('No PR found in workflow run');
            return;
          }
          
          const prNumber = pr.number;
          const deploymentUrl = `https://proud-ground-0a659080f-${prNumber}.eastus2.4.azurestaticapps.net`;
          
          // Check if this is a security fix PR
          const branchName = context.payload.workflow_run.head_branch;
          const isSecurityFix = branchName.startsWith('security-fix/');
          
          let comment = isSecurityFix 
            ? '## 🔒 Security Fix Validation Results\n\n'
            : '## 🎭 Playwright Test Results\n\n';
          
          comment += `🌐 **Deployment URL**: [${deploymentUrl}](${deploymentUrl})\n`;
          comment += `🎯 **Tests run against**: Deployed PR #${prNumber} environment\n\n`;
          
          if (isSecurityFix) {
            comment += '> ⚠️ **Important**: These tests validate that the security fix does not break existing functionality.\n\n';
          }
          
          // Check for test results
          const artifactsDir = 'artifacts';
          let testsPassed = 0;
          let totalTests = 5; // We have 5 browser configurations
          
          if (fs.existsSync(artifactsDir)) {
            const projects = fs.readdirSync(artifactsDir);
            
            comment += '### Browser Test Results:\n';
            for (const project of projects) {
              if (project.includes('playwright-results')) {
                testsPassed++;
              }
            }
            
            const browserConfigs = ['chromium', 'firefox', 'webkit', 'Mobile Chrome', 'Mobile Safari'];
            browserConfigs.forEach((browser, index) => {
              const status = index < testsPassed ? '✅' : '❌';
              comment += `- **${browser}**: ${status}\n`;
            });
          }
          
          comment += `\n### Summary: ${testsPassed}/${totalTests} browser configurations passed\n\n`;
          
          if (isSecurityFix && testsPassed === totalTests) {
            comment += '✅ **Security fix validated successfully!** All tests pass with the security patch applied.\n\n';
          } else if (isSecurityFix && testsPassed < totalTests) {
            comment += '⚠️ **Warning**: Some tests failed with the security patch. Please review the failures.\n\n';
          }
          
          comment += `[View full test report in Actions](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
          
          // Post comment to PR
          await github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
  
  # Set final status on PR
  set-status-final:
    if: ${{ always() && github.event.workflow_run.event == 'pull_request' }}
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Determine test status
        id: status
        run: |
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "state=success" >> $GITHUB_OUTPUT
            echo "description=All E2E tests passed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "state=failure" >> $GITHUB_OUTPUT
            echo "description=E2E tests failed" >> $GITHUB_OUTPUT
          else
            echo "state=error" >> $GITHUB_OUTPUT
            echo "description=E2E tests could not complete" >> $GITHUB_OUTPUT
          fi
      
      - name: Set commit status
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.workflow_run.pull_requests[0];
            if (!pr) return;
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.workflow_run.head_sha,
              state: '${{ steps.status.outputs.state }}',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: '${{ steps.status.outputs.description }}',
              context: 'E2E Tests / Playwright'
            });