name: Playwright Tests

on:
  workflow_run:
    workflows: ["Azure Static Web Apps CI/CD"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      deployment_url:
        description: 'URL to test against (optional)'
        required: false
        type: string

jobs:
  test:
    # Only run if the deployment was successful or this is a manual run
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - project: chromium
            browser: chromium
          - project: firefox
            browser: firefox
          - project: webkit
            browser: webkit
          - project: 'Mobile Chrome'
            browser: chromium
          - project: 'Mobile Safari'
            browser: webkit
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/jod'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Determine test URL
      id: test_url
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ -n "${{ github.event.inputs.deployment_url }}" ]]; then
          # Manual run with custom URL
          echo "TEST_URL=${{ github.event.inputs.deployment_url }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.workflow_run.event }}" == "pull_request" ]]; then
          # PR deployment - need to get PR number from workflow run
          PR_NUMBER=$(echo '${{ toJSON(github.event.workflow_run.pull_requests[0]) }}' | jq -r '.number // empty')
          if [[ -n "${PR_NUMBER}" ]]; then
            echo "TEST_URL=https://proud-ground-0a659080f-${PR_NUMBER}.eastus2.4.azurestaticapps.net" >> $GITHUB_OUTPUT
          else
            echo "TEST_URL=https://proud-ground-0a659080f.4.azurestaticapps.net" >> $GITHUB_OUTPUT
          fi
        else
          # Main branch deployment
          echo "TEST_URL=https://proud-ground-0a659080f.4.azurestaticapps.net" >> $GITHUB_OUTPUT
        fi
        echo "Testing against: $(cat $GITHUB_OUTPUT | grep TEST_URL | cut -d'=' -f2)"
    
    - name: Wait for deployment to be ready
      run: |
        URL="${{ steps.test_url.outputs.TEST_URL }}"
        echo "Waiting for deployment at ${URL}"
        for i in {1..30}; do
          if curl -s -o /dev/null -w "%{http_code}" "${URL}" | grep -q "200\|304"; then
            echo "Deployment is ready!"
            break
          fi
          echo "Waiting for deployment... (attempt $i/30)"
          sleep 10
        done
    
    - name: Run Playwright tests
      run: npx playwright test --project="${{ matrix.project }}"
      env:
        PLAYWRIGHT_BASE_URL: ${{ steps.test_url.outputs.TEST_URL }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results-${{ strategy.job-index }}
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    if: always()
    needs: test
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          artifacts/**/test-results/*.xml
        check_name: Playwright Test Results
        comment_title: Playwright Test Results
        
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## ðŸŽ­ Playwright Test Results\n\n';
          
          // Check for test results
          const artifactsDir = 'artifacts';
          if (fs.existsSync(artifactsDir)) {
            const projects = fs.readdirSync(artifactsDir);
            
            for (const project of projects) {
              if (project.includes('playwright-results')) {
                const browser = project.replace('playwright-results-', '');
                comment += `- **${browser}**: âœ… Tests completed\n`;
              }
            }
          }
          
          comment += '\n[View full test report in Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });